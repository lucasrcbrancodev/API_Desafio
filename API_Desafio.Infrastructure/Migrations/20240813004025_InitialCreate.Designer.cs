// <auto-generated />
using System;
using System.Collections.Generic;
using API_Desafio.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API_Desafio.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240813004025_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API_Desafio.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("ContactInformation", "API_Desafio.Domain.Models.User.ContactInformation#ContactInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Cell")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DateOfBirthInformation", "API_Desafio.Domain.Models.User.DateOfBirthInformation#DateOfBirthInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Age")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DocumentInformation", "API_Desafio.Domain.Models.User.DocumentInformation#DocumentInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ImageInformation", "API_Desafio.Domain.Models.User.ImageInformation#ImageInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Thumbnail")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LocationInformation", "API_Desafio.Domain.Models.User.LocationInformation#LocationInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Number")
                                .HasColumnType("integer");

                            b1.Property<int>("Postcode")
                                .HasColumnType("integer");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LoginInformation", "API_Desafio.Domain.Models.User.LoginInformation#LoginInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SHA256")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NameInformation", "API_Desafio.Domain.Models.User.NameInformation#NameInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Last")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("User");
                });
#pragma warning restore 612, 618
        }
    }
}
